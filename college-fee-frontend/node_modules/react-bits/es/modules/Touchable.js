import * as React from 'react';
import * as PropTypes from 'prop-types';
import * as TimerMixin from 'react-timer-mixin';
import * as createReactClass from 'create-react-class';
import { throttle } from '../util/throttle';
var ensurePositiveDelayProps = function (_props) {
};
var InsetPropType = PropTypes.shape({
    top: PropTypes.number,
    left: PropTypes.number,
    bottom: PropTypes.number,
    right: PropTypes.number
});
export var createTouchable = function (Animated, StyleSheet, Platform, TouchableMixin) {
    var styles = StyleSheet.create({
        touchable: Platform.select({
            web: {
                cursor: 'pointer'
            },
            ios: {},
            android: {},
            sketch: {},
            vr: {}
        })
    });
    var propTypes = {
        accessible: PropTypes.bool,
        disabled: PropTypes.bool,
        onPress: PropTypes.func,
        onPressIn: PropTypes.func,
        onPressOut: PropTypes.func,
        onLayout: PropTypes.func,
        onLongPress: PropTypes.func,
        delayPressIn: PropTypes.number,
        delayPressOut: PropTypes.number,
        delayLongPress: PropTypes.number,
        pressRetentionOffset: InsetPropType,
        hitSlop: InsetPropType,
        activeValue: PropTypes.number,
        press: PropTypes.instanceOf(Animated.Value),
        pressDuration: PropTypes.number,
        children: PropTypes.node
    };
    return createReactClass({
        propTypes: propTypes,
        displayName: 'Touchable',
        mixins: [TimerMixin, TouchableMixin],
        statics: {
            Mixin: TouchableMixin
        },
        getDefaultProps: function () {
            return {
                activeValue: 1,
                delayPressIn: 0,
                delayPressOut: 100,
                delayLongPress: 500,
                pressDuration: 150,
                pressRetentionOffset: {
                    top: 20,
                    left: 20,
                    right: 20,
                    bottom: 30
                },
                press: new Animated.Value(0)
            };
        },
        getInitialState: function () {
            return this.touchableGetInitialState();
        },
        componentDidMount: function () {
            ensurePositiveDelayProps(this.props);
        },
        componentWillReceiveProps: function (nextProps) {
            ensurePositiveDelayProps(nextProps);
        },
        setPressValue: function (toValue) {
            Animated.timing(this.props.press, {
                toValue: toValue,
                duration: this.props.pressDuration
            }).start();
        },
        touchableHandleActivePressIn: throttle(function (e) {
            if (e.dispatchConfig && e.dispatchConfig.registrationName === 'onResponderGrant') {
                this._setActive(0);
            }
            else {
                this._setActive(150);
            }
            this.props.onPressIn && this.props.onPressIn(e);
        }),
        touchableHandleActivePressOut: throttle(function (e) {
            this._setInactive(250);
            this.props.onPressOut && this.props.onPressOut(e);
        }),
        touchableHandlePress: throttle(function (e) {
            this.props.onPress && this.props.onPress(e);
        }),
        touchableHandleLongPress: throttle(function (e) {
            this.props.onLongPress && this.props.onLongPress(e);
        }),
        touchableGetPressRectOffset: function () {
            return this.props.pressRetentionOffset;
        },
        touchableGetHitSlop: function () {
            return this.props.hitSlop;
        },
        touchableGetHighlightDelayMS: function () {
            return this.props.delayPressIn;
        },
        touchableGetLongPressDelayMS: function () {
            return this.props.delayLongPress;
        },
        touchableGetPressOutDelayMS: function () {
            return this.props.delayPressOut;
        },
        _setActive: function (duration) {
            this.setPressValue(1, duration);
        },
        _setInactive: function (duration) {
            this.setPressValue(0, duration);
        },
        render: function () {
            var child = this.props.children;
            var childStyle = child && child.props && child.props.style;
            return React.cloneElement(child, {
                onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
                onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
                onResponderGrant: this.touchableHandleResponderGrant,
                onResponderMove: this.touchableHandleResponderMove,
                onResponderRelease: this.touchableHandleResponderRelease,
                onResponderTerminate: this.touchableHandleResponderTerminate,
                style: [
                    styles.touchable,
                    childStyle,
                ]
            });
        }
    });
};
