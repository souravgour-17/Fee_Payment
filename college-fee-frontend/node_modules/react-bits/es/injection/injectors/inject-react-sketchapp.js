var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
import { ReactBits } from '../../ReactBits';
import * as Animated from 'animated';
import * as Easing from 'animated/lib/Easing';
import { View, Text, Image, StyleSheet, } from 'react-sketchapp';
import { createTouchable } from '../../modules/Touchable';
var TouchableMixin = {
    componentWillUnmount: function () { },
    touchableGetInitialState: function () {
        return {
            touchable: {
                touchState: undefined,
                responderID: null
            }
        };
    },
    touchableHandleResponderTerminationRequest: function () { return false; },
    touchableHandleStartShouldSetResponder: function () { return false; },
    touchableLongPressCancelsPress: function () { return true; },
    touchableHandleResponderGrant: function () { },
    touchableHandleResponderRelease: function () { },
    touchableHandleResponderTerminate: function () { },
    touchableHandleResponderMove: function () { }
};
Animated.inject.FlattenStyle(StyleSheet.flatten);
ReactBits.inject({
    StyleSheet: StyleSheet,
    View: View,
    Text: Text,
    Image: Image,
    Easing: Easing,
    Animated: __assign({}, Animated, { View: Animated.createAnimatedComponent(View), Text: Animated.createAnimatedComponent(Text), Image: Animated.createAnimatedComponent(Image) }),
    Platform: {
        OS: 'sketch',
        Version: 1
    }
});
ReactBits.inject({
    Touchable: createTouchable(Animated, StyleSheet, ReactBits.Platform, TouchableMixin)
});
