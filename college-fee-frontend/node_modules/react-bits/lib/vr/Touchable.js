"use strict";
exports.__esModule = true;
var React = require("react");
var PropTypes = require("prop-types");
var createReactClass = require("create-react-class");
var react_vr_1 = require("react-vr");
var throttle_1 = require("../util/throttle");
var InsetPropType = PropTypes.shape({
    top: PropTypes.number,
    left: PropTypes.number,
    bottom: PropTypes.number,
    right: PropTypes.number
});
exports.createTouchable = function (Animated) {
    return createReactClass({
        displayName: 'Touchable',
        propTypes: {
            accessible: PropTypes.bool,
            disabled: PropTypes.bool,
            onPress: PropTypes.func,
            onPressIn: PropTypes.func,
            onPressOut: PropTypes.func,
            onLayout: PropTypes.func,
            onLongPress: PropTypes.func,
            delayPressIn: PropTypes.number,
            delayPressOut: PropTypes.number,
            delayLongPress: PropTypes.number,
            pressRetentionOffset: InsetPropType,
            hitSlop: InsetPropType,
            activeValue: PropTypes.number,
            press: PropTypes.instanceOf(Animated.Value),
            pressDuration: PropTypes.number,
            children: PropTypes.node
        },
        mixins: [],
        statics: {
            Mixin: null
        },
        getDefaultProps: function () {
            return {
                activeValue: 1,
                delayPressIn: 0,
                delayPressOut: 100,
                delayLongPress: 500,
                pressDuration: 150,
                pressRetentionOffset: {
                    top: 20,
                    left: 20,
                    right: 20,
                    bottom: 30
                },
                press: new Animated.Value(0)
            };
        },
        setPressValue: function (toValue) {
            Animated.timing(this.props.press, {
                toValue: toValue,
                duration: this.props.pressDuration
            }).start();
        },
        touchableHandleActivePressIn: throttle_1.throttle(function (e) {
            this._setActive(150);
            this.props.onPressIn && this.props.onPressIn(e);
        }),
        touchableHandleActivePressOut: throttle_1.throttle(function (e) {
            this._setInactive(250);
            this.props.onPressOut && this.props.onPressOut(e);
        }),
        touchableHandlePress: throttle_1.throttle(function (e) {
            this.props.onPress && this.props.onPress(e);
        }),
        touchableHandleLongPress: throttle_1.throttle(function (e) {
            this.props.onLongPress && this.props.onLongPress(e);
        }),
        _setActive: function (duration) {
            this.setPressValue(1, duration);
        },
        _setInactive: function (duration) {
            this.setPressValue(0, duration);
        },
        render: function () {
            var child = this.props.children;
            return (React.createElement(react_vr_1.VrButton, { accessible: this.props.accessible, disabled: this.props.disabled, onLayout: this.props.onLayout, onButtonPress: this.touchableHandleActivePressIn, onButtonRelease: this.touchableHandleActivePressOut, onClick: this.touchableHandlePress, onLongClick: this.touchableHandleLongPress }, child));
        }
    });
};
